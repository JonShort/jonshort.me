(this["webpackJsonpjonshort.me"]=this["webpackJsonpjonshort.me"]||[]).push([[5],{39:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.withMDXComponents=void 0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=i(n(1)),a=i(n(43)),s=i(n(2));function i(e){return e&&e.__esModule?e:{default:e}}var l=(0,a.default)({}),c=l.Provider,u=l.Consumer;t.withMDXComponents=function(e){return function(t){var n=t.components,a=function(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}(t,["components"]);return r.default.createElement(u,null,(function(t){return r.default.createElement(e,o({components:n||t},a))}))}};var p=function(e){var t=e.components,n=e.children;return r.default.createElement(c,{value:t},n)};p.propTypes={components:s.default.object.isRequired,children:s.default.element.isRequired},t.default=p},40:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(41);Object.defineProperty(t,"MDXTag",{enumerable:!0,get:function(){return a(o).default}});var r=n(39);function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"MDXProvider",{enumerable:!0,get:function(){return a(r).default}})},41:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(1),s=c(a),i=c(n(42)),l=n(39);function c(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==typeof t&&"function"!==typeof t?e:t}var m={inlineCode:"code",wrapper:"div"},f=function(e){function t(){return u(this,t),p(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"render",value:function(){var e=this.props,t=e.name,n=e.parentName,r=e.props,a=void 0===r?{}:r,l=e.children,c=e.components,u=void 0===c?{}:c,p=e.Layout,f=e.layoutProps,h=u[n+"."+t]||u[t]||m[t]||t;return p?((0,i.default)(this,p),s.default.createElement(p,o({components:u},f),s.default.createElement(h,a,l))):s.default.createElement(h,a,l)}}]),t}(a.Component);t.default=(0,l.withMDXComponents)(f)},42:function(e,t,n){"use strict";var o={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},r={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a=Object.defineProperty,s=Object.getOwnPropertyNames,i=Object.getOwnPropertySymbols,l=Object.getOwnPropertyDescriptor,c=Object.getPrototypeOf,u=c&&c(Object);e.exports=function e(t,n,p){if("string"!==typeof n){if(u){var m=c(n);m&&m!==u&&e(t,m,p)}var f=s(n);i&&(f=f.concat(i(n)));for(var h=0;h<f.length;++h){var d=f[h];if(!o[d]&&!r[d]&&(!p||!p[d])){var g=l(n,d);try{a(t,d,g)}catch(b){}}}return t}return t}},43:function(e,t,n){"use strict";t.__esModule=!0;var o=a(n(1)),r=a(n(44));function a(e){return e&&e.__esModule?e:{default:e}}t.default=o.default.createContext||r.default,e.exports=t.default},44:function(e,t,n){"use strict";t.__esModule=!0;var o=n(1),r=(s(o),s(n(2))),a=s(n(45));s(n(46));function s(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==typeof t&&"function"!==typeof t?e:t}function c(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var u=1073741823;function p(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,o){e=n,t.forEach((function(t){return t(e,o)}))}}}t.default=function(e,t){var n,s,m="__create-react-context-"+(0,a.default)()+"__",f=function(e){function n(){var t,o;i(this,n);for(var r=arguments.length,a=Array(r),s=0;s<r;s++)a[s]=arguments[s];return t=o=l(this,e.call.apply(e,[this].concat(a))),o.emitter=p(o.props.value),l(o,t)}return c(n,e),n.prototype.getChildContext=function(){var e;return(e={})[m]=this.emitter,e},n.prototype.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n=this.props.value,o=e.value,r=void 0;((a=n)===(s=o)?0!==a||1/a===1/s:a!==a&&s!==s)?r=0:(r="function"===typeof t?t(n,o):u,0!==(r|=0)&&this.emitter.set(e.value,r))}var a,s},n.prototype.render=function(){return this.props.children},n}(o.Component);f.childContextTypes=((n={})[m]=r.default.object.isRequired,n);var h=function(t){function n(){var e,o;i(this,n);for(var r=arguments.length,a=Array(r),s=0;s<r;s++)a[s]=arguments[s];return e=o=l(this,t.call.apply(t,[this].concat(a))),o.state={value:o.getValue()},o.onUpdate=function(e,t){0!==((0|o.observedBits)&t)&&o.setState({value:o.getValue()})},l(o,e)}return c(n,t),n.prototype.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=void 0===t||null===t?u:t},n.prototype.componentDidMount=function(){this.context[m]&&this.context[m].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=void 0===e||null===e?u:e},n.prototype.componentWillUnmount=function(){this.context[m]&&this.context[m].off(this.onUpdate)},n.prototype.getValue=function(){return this.context[m]?this.context[m].get():e},n.prototype.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(o.Component);return h.contextTypes=((s={})[m]=r.default.object,s),{Provider:f,Consumer:h}},e.exports=t.default},45:function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(14))},46:function(e,t,n){"use strict";var o=n(47);e.exports=o},47:function(e,t,n){"use strict";function o(e){return function(){return e}}var r=function(){};r.thatReturns=o,r.thatReturnsFalse=o(!1),r.thatReturnsTrue=o(!0),r.thatReturnsNull=o(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},e.exports=r},48:function(e,t,n){"use strict";function o(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,"a",(function(){return o}))},52:function(e,t,n){"use strict";n.r(t);var o=n(48),r=n(1),a=n.n(r),s=n(40);t.default=function(e){var t=e.components;Object(o.a)(e,["components"]);return a.a.createElement(s.MDXTag,{name:"wrapper",components:t},a.a.createElement(s.MDXTag,{name:"p",components:t},"\ud83d\udc4d This post was ",a.a.createElement(s.MDXTag,{name:"em",components:t,parentName:"p"},"heavily")," inspired by an awesome ",a.a.createElement(s.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"https://rustwasm.github.io/docs/book/introduction.html"}},"tutorial on wasm and rust")),a.a.createElement(s.MDXTag,{name:"h3",components:t},"'Smart' code"),a.a.createElement(s.MDXTag,{name:"p",components:t},"Let's say we have a grid:"),a.a.createElement(s.MDXTag,{name:"pre",components:t},a.a.createElement(s.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-txt",metaString:""}},"[1] [0] [1] [1] [0] [1]\n[1] [0] [0] [1] [0] [1]\n[1] [0] [1] [1] [0] [1]\n[1] [0] [1] [1] [0] [1]\n[1] [0] [1] [1] [0] [1]\n[1] [0] [1] [1] [0] [1]\n")),a.a.createElement(s.MDXTag,{name:"p",components:t},"And my task is to figure out how many cells contain a 1 around a given cell (with wrapping - e.g. rightmost column is considered 'neighbor' to the leftmost)."),a.a.createElement(s.MDXTag,{name:"p",components:t},"You could - as written ",a.a.createElement(s.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"https://rustwasm.github.io/docs/book/game-of-life/implementing.html#rust-implementation"}},"in the wasm + rust tutorial")," - write some fancy rust code:"),a.a.createElement("small",null,"note - I've commented this, don't worry about understanding every detail"),a.a.createElement(s.MDXTag,{name:"pre",components:t},a.a.createElement(s.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-rust",metaString:""}},"// Here the user provides coordinates (row and column)\nfn live_neighbor_count(&self, row: u32, column: u32) -> u8 {\n    let mut count = 0;\n\n    // The first for loop runs, with delta_row signifying:\n    // [ ] the cell above\n    // [x] the chosen cell\n    // [ ] the cell below\n    for delta_row in [self.height - 1, 0, 1].iter().cloned() {\n\n        // The second for loop is similar, but because it's\n        // nested, it'll actually run 9 times\n        // [ ] [ ] [ ]\n        // [ ] [x] [ ] chosen cell is now the 'middle'\n        // [ ] [ ] [ ]\n        for delta_col in [self.width - 1, 0, 1].iter().cloned() {\n\n            // when both are 0, it's the current cell\n            // so we don't do anything\n            if delta_row == 0 && delta_col == 0 {\n                continue;\n            }\n\n            // because the grid overflows, we use a delta and\n            // modulo to get the cell the other side; e.g.\n            // [ ] [ ] [B] // 'below' cell is actually above\n            // [ ] [ ] [A]\n            // [R] [L] [C] // 'right' cell is on the other side\n            // e.g. (50 + 1) % 50 == 1\n            let neighbor_row = (row + delta_row) % self.height;\n            let neighbor_col = (column + delta_col) % self.width;\n\n            // implementation detail of how the cells\n            // are stored (flat array), this returns the\n            // index of the current cell\n            let idx = self.get_index(neighbor_row, neighbor_col);\n\n            // an 'alive' cell is 1, so the count is\n            // only incremented if the cell is alive\n            count += self.cells[idx] as u8;\n        }\n    }\n\n    // the final count is returned, which is\n    // the number of 'alive' cells near the current\n    count\n}\n")),a.a.createElement(s.MDXTag,{name:"p",components:t},"As a section of code, this is \ud83d\ude05 ",a.a.createElement(s.MDXTag,{name:"em",components:t,parentName:"p"},"fairly confusing")," \ud83d\ude05 but also quite 'smart'. It can get the value in neighbor cells without worrying about the handling the edges of the grid in an explicit way, e.g. an if statement."),a.a.createElement(s.MDXTag,{name:"h3",components:t},"Profiling"),a.a.createElement(s.MDXTag,{name:"p",components:t},"Our code now fulfils it's purpose, and would probably be considered a 'job done' going by our requirements."),a.a.createElement(s.MDXTag,{name:"p",components:t},"However, the 'smart' modulo operation (%) hides a potential performance hit! It's a 'div instruction' which is division performed on unsigned integers. This means that for every cell in our grid we're performing 16 of these operations, which can be quite expensive."),a.a.createElement(s.MDXTag,{name:"p",components:t},"Here's a benchmark of the rust code, we can see the div instructions in red:\n",a.a.createElement(s.MDXTag,{name:"img",components:t,parentName:"p",props:{src:"https://rustwasm.github.io/docs/book/images/game-of-life/bench-perf-annotate.png",alt:"rust code being benchmarked"}})),a.a.createElement(s.MDXTag,{name:"h3",components:t},"Speeding up the code by removing 'smart stuff'"),a.a.createElement(s.MDXTag,{name:"p",components:t},"As written ",a.a.createElement(s.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"https://rustwasm.github.io/docs/book/game-of-life/time-profiling.html#making-time-run-faster"}},"in the wasm + rust tutorial"),", we can make this code less fancy, and acheive a speedup at the same time, by using if statements and no modulo operators."),a.a.createElement(s.MDXTag,{name:"p",components:t},"We rewrite our code to:"),a.a.createElement("small",null,"Again, I've commented this, don't worry about understanding every detail!"),a.a.createElement(s.MDXTag,{name:"pre",components:t},a.a.createElement(s.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-rust",metaString:""}},"// coordinates provided as before\nfn live_neighbor_count(&self, row: u32, column: u32) -> u8 {\n    let mut count = 0;\n\n    // if we're at the top of the grid, north is actually the\n    // bottom of the grid \n    let north = if row == 0 {\n        self.height - 1\n    } else {\n        row - 1\n    };\n\n    // if we're at the bottom of the grid, south is actually\n    // the top of the grid\n    let south = if row == self.height - 1 {\n        0\n    } else {\n        row + 1\n    };\n\n    // if we're at the left of the grid, west is actually\n    // the right of the grid\n    let west = if column == 0 {\n        self.width - 1\n    } else {\n        column - 1\n    };\n\n    // if we're at the right of the grid, east is actually\n    // the left of the grid\n    let east = if column == self.width - 1 {\n        0\n    } else {\n        column + 1\n    };\n\n    // In this section we get the value of all the neighbors\n    // [nw] [n] [ne]    [1] [0] [1]\n    // [w]       [e]  = [0]     [0] = 4\n    // [sw] [s] [se]    [1] [0] [1]\n\n    let nw = self.get_index(north, west);\n    count += self.cells[nw] as u8;\n\n    let n = self.get_index(north, column);\n    count += self.cells[n] as u8;\n\n    let ne = self.get_index(north, east);\n    count += self.cells[ne] as u8;\n\n    let w = self.get_index(row, west);\n    count += self.cells[w] as u8;\n\n    let e = self.get_index(row, east);\n    count += self.cells[e] as u8;\n\n    let sw = self.get_index(south, west);\n    count += self.cells[sw] as u8;\n\n    let s = self.get_index(south, column);\n    count += self.cells[s] as u8;\n\n    let se = self.get_index(south, east);\n    count += self.cells[se] as u8;\n\n    // Then the same as before, we return the count\n    count\n}\n")),a.a.createElement(s.MDXTag,{name:"p",components:t},"So our code is now significantly longer, we're doing a lot of things that look repetitive. A reviewer might ask if there's a way to abstract the logic away; but since we've seen the two different approaches, we can see that the code feels easier to read:"),a.a.createElement(s.MDXTag,{name:"ul",components:t},a.a.createElement(s.MDXTag,{name:"li",components:t,parentName:"ul"},"by using points of a compass we've given readers something tangible to reason about while reading"),a.a.createElement(s.MDXTag,{name:"li",components:t,parentName:"ul"},"no longer do we have to explain that we're using a delta (and potentially why)"),a.a.createElement(s.MDXTag,{name:"li",components:t,parentName:"ul"},"the messy nested for loops are removed")),a.a.createElement(s.MDXTag,{name:"h3",components:t},"The result"),a.a.createElement(s.MDXTag,{name:"pre",components:t},a.a.createElement(s.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-bash",metaString:""}},"$ cargo benchcmp before.txt after.txt\n name            before.txt ns/iter  after.txt ns/iter  diff %  speedup\n universe_ticks  664,421             87,258            -86.87%   x 7.61\n")),a.a.createElement(s.MDXTag,{name:"p",components:t},"The new code actually yields a ",a.a.createElement(s.MDXTag,{name:"em",components:t,parentName:"p"},"7.61x")," speed up!"),a.a.createElement(s.MDXTag,{name:"p",components:t},"We're often pushed to find 'clean one-liner' solutions, or abstract something so we don't repeat ourselves. But sometimes there are benefits in both readability and performance when we make code 'simpler'."),a.a.createElement(s.MDXTag,{name:"p",components:t},"Profiling and getting the best performance out of code can be a useful exercise, but make sure the gains are worth it."),a.a.createElement(s.MDXTag,{name:"p",components:t},"\ud83e\udd13 Thanks for reading, check out the excellent ",a.a.createElement(s.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"https://rustwasm.github.io/docs/book/introduction.html"}},"tutorial on wasm and rust")," which gave me the content for this article."),a.a.createElement(s.MDXTag,{name:"p",components:t},"And for rust in general, i highly reccomend ",a.a.createElement(s.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"https://doc.rust-lang.org/book/"}},"the official rust book"),", it's some of the best documentation i've ever read \ud83e\udd73"))}}}]);
//# sourceMappingURL=5.ee8120cc.chunk.js.map
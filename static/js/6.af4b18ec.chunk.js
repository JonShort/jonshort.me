(this["webpackJsonpjonshort.me"]=this["webpackJsonpjonshort.me"]||[]).push([[6],{36:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.withMDXComponents=void 0;var a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},o=c(t(1)),r=c(t(40)),i=c(t(11));function c(e){return e&&e.__esModule?e:{default:e}}var l=(0,r.default)({}),m=l.Provider,s=l.Consumer;n.withMDXComponents=function(e){return function(n){var t=n.components,r=function(e,n){var t={};for(var a in e)n.indexOf(a)>=0||Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t}(n,["components"]);return o.default.createElement(s,null,(function(n){return o.default.createElement(e,a({components:t||n},r))}))}};var p=function(e){var n=e.components,t=e.children;return o.default.createElement(m,{value:n},t)};p.propTypes={components:i.default.object.isRequired,children:i.default.element.isRequired},n.default=p},37:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(38);Object.defineProperty(n,"MDXTag",{enumerable:!0,get:function(){return r(a).default}});var o=t(36);function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(n,"MDXProvider",{enumerable:!0,get:function(){return r(o).default}})},38:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},o=function(){function e(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(n,t,a){return t&&e(n.prototype,t),a&&e(n,a),n}}(),r=t(1),i=m(r),c=m(t(39)),l=t(36);function m(e){return e&&e.__esModule?e:{default:e}}function s(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function p(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!==typeof n&&"function"!==typeof n?e:n}var u={inlineCode:"code",wrapper:"div"},g=function(e){function n(){return s(this,n),p(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),o(n,[{key:"render",value:function(){var e=this.props,n=e.name,t=e.parentName,o=e.props,r=void 0===o?{}:o,l=e.children,m=e.components,s=void 0===m?{}:m,p=e.Layout,g=e.layoutProps,f=s[t+"."+n]||s[n]||u[n]||n;return p?((0,c.default)(this,p),i.default.createElement(p,a({components:s},g),i.default.createElement(f,r,l))):i.default.createElement(f,r,l)}}]),n}(r.Component);n.default=(0,l.withMDXComponents)(g)},39:function(e,n,t){"use strict";var a={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},r=Object.defineProperty,i=Object.getOwnPropertyNames,c=Object.getOwnPropertySymbols,l=Object.getOwnPropertyDescriptor,m=Object.getPrototypeOf,s=m&&m(Object);e.exports=function e(n,t,p){if("string"!==typeof t){if(s){var u=m(t);u&&u!==s&&e(n,u,p)}var g=i(t);c&&(g=g.concat(c(t)));for(var f=0;f<g.length;++f){var h=g[f];if(!a[h]&&!o[h]&&(!p||!p[h])){var d=l(t,h);try{r(n,h,d)}catch(T){}}}return n}return n}},40:function(e,n,t){"use strict";n.__esModule=!0;var a=r(t(1)),o=r(t(41));function r(e){return e&&e.__esModule?e:{default:e}}n.default=a.default.createContext||o.default,e.exports=n.default},41:function(e,n,t){"use strict";n.__esModule=!0;var a=t(1),o=(i(a),i(t(11))),r=i(t(42));i(t(43));function i(e){return e&&e.__esModule?e:{default:e}}function c(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function l(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!==typeof n&&"function"!==typeof n?e:n}function m(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}var s=1073741823;function p(e){var n=[];return{on:function(e){n.push(e)},off:function(e){n=n.filter((function(n){return n!==e}))},get:function(){return e},set:function(t,a){e=t,n.forEach((function(n){return n(e,a)}))}}}n.default=function(e,n){var t,i,u="__create-react-context-"+(0,r.default)()+"__",g=function(e){function t(){var n,a;c(this,t);for(var o=arguments.length,r=Array(o),i=0;i<o;i++)r[i]=arguments[i];return n=a=l(this,e.call.apply(e,[this].concat(r))),a.emitter=p(a.props.value),l(a,n)}return m(t,e),t.prototype.getChildContext=function(){var e;return(e={})[u]=this.emitter,e},t.prototype.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t=this.props.value,a=e.value,o=void 0;((r=t)===(i=a)?0!==r||1/r===1/i:r!==r&&i!==i)?o=0:(o="function"===typeof n?n(t,a):s,0!==(o|=0)&&this.emitter.set(e.value,o))}var r,i},t.prototype.render=function(){return this.props.children},t}(a.Component);g.childContextTypes=((t={})[u]=o.default.object.isRequired,t);var f=function(n){function t(){var e,a;c(this,t);for(var o=arguments.length,r=Array(o),i=0;i<o;i++)r[i]=arguments[i];return e=a=l(this,n.call.apply(n,[this].concat(r))),a.state={value:a.getValue()},a.onUpdate=function(e,n){0!==((0|a.observedBits)&n)&&a.setState({value:a.getValue()})},l(a,e)}return m(t,n),t.prototype.componentWillReceiveProps=function(e){var n=e.observedBits;this.observedBits=void 0===n||null===n?s:n},t.prototype.componentDidMount=function(){this.context[u]&&this.context[u].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=void 0===e||null===e?s:e},t.prototype.componentWillUnmount=function(){this.context[u]&&this.context[u].off(this.onUpdate)},t.prototype.getValue=function(){return this.context[u]?this.context[u].get():e},t.prototype.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},t}(a.Component);return f.contextTypes=((i={})[u]=o.default.object,i),{Provider:g,Consumer:f}},e.exports=n.default},42:function(e,n,t){"use strict";(function(n){var t="__global_unique_id__";e.exports=function(){return n[t]=(n[t]||0)+1}}).call(this,t(17))},43:function(e,n,t){"use strict";var a=t(44);e.exports=a},44:function(e,n,t){"use strict";function a(e){return function(){return e}}var o=function(){};o.thatReturns=a,o.thatReturnsFalse=a(!1),o.thatReturnsTrue=a(!0),o.thatReturnsNull=a(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},45:function(e,n,t){"use strict";function a(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}t.d(n,"a",(function(){return a}))},47:function(e,n,t){"use strict";t.r(n);var a=t(45),o=t(1),r=t.n(o),i=t(37);n.default=function(e){var n=e.components;Object(a.a)(e,["components"]);return r.a.createElement(i.MDXTag,{name:"wrapper",components:n},r.a.createElement(i.MDXTag,{name:"p",components:n},r.a.createElement(i.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://en.wikipedia.org/wiki/Newline"}},"Line endings")," can be extremely annoying when sharing code between mac / linux / windows."),r.a.createElement(i.MDXTag,{name:"p",components:n},"Each operating system handles line endings differently, with the two main 'end of line' (EOL) types being:"),r.a.createElement(i.MDXTag,{name:"ul",components:n},r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"CRLF")," (windows)"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"LF")," (unix / mac)")),r.a.createElement(i.MDXTag,{name:"h3",components:n},"What are line endings?"),r.a.createElement(i.MDXTag,{name:"p",components:n},"A hangover of ASCII code being developed in the 1960s, ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"CRLF")," actually represents two instructions, 'carriage return' (CR) and 'line feed' (LF). "),r.a.createElement(i.MDXTag,{name:"p",components:n},"If we imagine a typewriter, ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"CR")," instructs the 'carriage' (the part which horizontally positions the paper) to return to its starting position, then ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"LF")," feeds paper into the carriage, creating a newline."),r.a.createElement(i.MDXTag,{name:"p",components:n},r.a.createElement(i.MDXTag,{name:"img",components:n,parentName:"p",props:{src:"typewriter_illustration",alt:"diagram showing how a typewriter works"}})),r.a.createElement(i.MDXTag,{name:"h3",components:n},"The codes behind line endings"),r.a.createElement(i.MDXTag,{name:"p",components:n},"Imagine we access a windows machine and create a text file with the following content:"),r.a.createElement(i.MDXTag,{name:"pre",components:n},r.a.createElement(i.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-txt",metaString:""}},"a\n\nb\n\nc\n")),r.a.createElement(i.MDXTag,{name:"p",components:n},"If we were to look at the ASCII behind the file, it'd look something like:"),r.a.createElement(i.MDXTag,{name:"pre",components:n},r.a.createElement(i.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ASCII",metaString:""}},"61 0D 0A 0D 0A 62 0D 0A 0D 0A 63\n")),r.a.createElement("small",null,"note - I chose hex because it's a bit more compact than the raw binary"),r.a.createElement(i.MDXTag,{name:"p",components:n},"However if we had created our text file on a mac, it might instead look like:"),r.a.createElement(i.MDXTag,{name:"pre",components:n},r.a.createElement(i.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ASCII",metaString:""}},"61 0A 0A 62 0A 0A 63\n")),r.a.createElement(i.MDXTag,{name:"p",components:n},"Here's what each hex represents:"),r.a.createElement(i.MDXTag,{name:"ul",components:n},r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"61")," - a"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"62")," - b"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"63")," - c"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"0D")," - CR"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"0A")," - LF ")),r.a.createElement(i.MDXTag,{name:"p",components:n},"Notice that wherever there is a line break, windows includes ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"0D 0A")," (CR LF) whereas mac includes only ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"0A")," (LF)."),r.a.createElement(i.MDXTag,{name:"p",components:n},"Reading & writing text files with different line endings might have led to issues in the past, but nowadays most programs / operating systems handle it gracefully, so users don't have to worry about which EOL style was used."),r.a.createElement(i.MDXTag,{name:"p",components:n},"It's usually when we involve source control that the problems start to appear."),r.a.createElement(i.MDXTag,{name:"h3",components:n},"A real-life scenario"),r.a.createElement(i.MDXTag,{name:"p",components:n},"Let's run through a scenario (with a link to where this happened to me \ud83d\ude05):"),r.a.createElement(i.MDXTag,{name:"ol",components:n},r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ol"},"We fork a repository to fix a bug that has been reported"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ol"},"Our first commit goes in, where we edited a few lines in one file"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ol"},"We continue making changes, eventually we've made changes in 3 different files"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ol"},r.a.createElement(i.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://github.com/FormidableLabs/prism-react-renderer/pull/83/files/e6d4f1ec6039205cdae494ddbc1da3138e7a2a2b#diff-46e096273c34574c69c78c6fe33ac032"}},"We submit the PR, and notice the diff is unreadable!"))),r.a.createElement(i.MDXTag,{name:"p",components:n},"Git is showing us that every single line in the file has changed, but it isn't highlighting a specific area! It turns out that we've accidentally changed all the line endings in each file we edited."),r.a.createElement(i.MDXTag,{name:"p",components:n},"In our scenario:"),r.a.createElement(i.MDXTag,{name:"ul",components:n},r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},"The repository didn't include a ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},".gitattributes")," file"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},"The repository used ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"CRLF")," line endings (this was surprising)"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},"I was working on macOS with ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"core.autocrlf"),' set to "input" globally')),r.a.createElement(i.MDXTag,{name:"h3",components:n},"gitattributes"),r.a.createElement(i.MDXTag,{name:"p",components:n},"The ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".gitattributes")," file handles a few different things, but the most common use is to tell git how to handle line endings for different filetypes."),r.a.createElement(i.MDXTag,{name:"p",components:n},"They range in complexity, from a simple:"),r.a.createElement(i.MDXTag,{name:"pre",components:n},r.a.createElement(i.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yml",metaString:""}},"# Handle line endings automatically\n# for files detected as text\n# and leave all files detected\n# as binary untouched.\n* text=auto\n")),r.a.createElement(i.MDXTag,{name:"p",components:n},"To something more bespoke:"),r.a.createElement(i.MDXTag,{name:"pre",components:n},r.a.createElement(i.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yml",metaString:""}},"# Set the default behavior,\n# in case people don't have\n# core.autocrlf set.\n* text=auto\n\n# Explicitly declare text files you\n# want to always be converted\n# to native line endings on checkout.\n*.c text\n*.h text\n\n# Declare files that will always\n# have CRLF line endings on checkout.\n*.sln text eol=crlf\n\n# Denote all files that are truly\n# binary and should not be modified.\n*.png binary\n*.jpg binary\n")),r.a.createElement(i.MDXTag,{name:"p",components:n},"The flags above show:"),r.a.createElement(i.MDXTag,{name:"ul",components:n},r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"binary")," - don't process this file for line endings"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"text")," - process this file for line endings"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"eol")," - convert all line endings to this style ")),r.a.createElement(i.MDXTag,{name:"h3",components:n},"core.autocrlf"),r.a.createElement(i.MDXTag,{name:"p",components:n},"The ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"core.autocrlf")," setting controls how git handles line endings on checkout and on commit."),r.a.createElement(i.MDXTag,{name:"p",components:n},"There are three options that can be used:"),r.a.createElement(i.MDXTag,{name:"ul",components:n},r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},"true"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},"input"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},"false")),r.a.createElement(i.MDXTag,{name:"p",components:n},"The ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"true")," option will convert the line endings to ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"CRLF")," when checked out, but ensure line endings are ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"LF")," on commit."),r.a.createElement(i.MDXTag,{name:"p",components:n},"The ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"input")," option won't change line endings on checkout, but will ensure that files are ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"LF")," on commit."),r.a.createElement(i.MDXTag,{name:"p",components:n},"The ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"false")," option will disable any conversion, allowing ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"CRLF")," line endings to be committed."),r.a.createElement(i.MDXTag,{name:"p",components:n},"It's worth noting that these 'generic' options are overridden by the ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".gitattributes")," file, which is why it's usually a good idea to include one of these files if you're working on a project with developers who use a mixture of operating systems."),r.a.createElement(i.MDXTag,{name:"h3",components:n},"What's the best configuration?"),r.a.createElement(i.MDXTag,{name:"p",components:n},"Generally git reccomends text files use ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"LF")," line endings when committed to source control. Because of this, the best 'default' option for ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"core.autocrlf")," varies depending on the OS:"),r.a.createElement(i.MDXTag,{name:"ul",components:n},r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(i.MDXTag,{name:"strong",components:n,parentName:"li"},"Windows")," reccomends ",r.a.createElement(i.MDXTag,{name:"strong",components:n,parentName:"li"},"true"),", which gives you ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"CRLF")," locally, but ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"LF")," in source control"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(i.MDXTag,{name:"strong",components:n,parentName:"li"},"Unix / MacOS")," reccomends ",r.a.createElement(i.MDXTag,{name:"strong",components:n,parentName:"li"},"input"),", which ensures that code is ",r.a.createElement(i.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"LF")," when checked in, but doesn't convert on checkout")),r.a.createElement(i.MDXTag,{name:"h3",components:n},"How can we set the config?"),r.a.createElement(i.MDXTag,{name:"p",components:n},"It's often useful to setup a global git configuration, so that we have some reasonable defaults when working in new repositories."),r.a.createElement(i.MDXTag,{name:"p",components:n},"Then when a repository needs bespoke settings, we can set a local config which will only be used for that particular repo."),r.a.createElement(i.MDXTag,{name:"p",components:n},"Here are some examples:"),r.a.createElement(i.MDXTag,{name:"p",components:n},r.a.createElement(i.MDXTag,{name:"em",components:n,parentName:"p"},"Check the current global git config")),r.a.createElement(i.MDXTag,{name:"pre",components:n},r.a.createElement(i.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-bash",metaString:""}},"git config --global --list\n")),r.a.createElement(i.MDXTag,{name:"p",components:n},r.a.createElement(i.MDXTag,{name:"em",components:n,parentName:"p"},"Set the global autocrlf config to input")),r.a.createElement(i.MDXTag,{name:"pre",components:n},r.a.createElement(i.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-bash",metaString:""}},"git config --global core.autocrlf input\n")),r.a.createElement(i.MDXTag,{name:"p",components:n},r.a.createElement(i.MDXTag,{name:"em",components:n,parentName:"p"},"Check the autocrlf config which will be used for the current repo")),r.a.createElement(i.MDXTag,{name:"pre",components:n},r.a.createElement(i.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-bash",metaString:""}},"git config --get core.autocrlf\n")),r.a.createElement(i.MDXTag,{name:"p",components:n},r.a.createElement(i.MDXTag,{name:"em",components:n,parentName:"p"},"Set the local repo config to false")),r.a.createElement(i.MDXTag,{name:"pre",components:n},r.a.createElement(i.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-bash",metaString:""}},"git config --local core.autocrlf false\n")),r.a.createElement(i.MDXTag,{name:"h3",components:n},"Summary"),r.a.createElement(i.MDXTag,{name:"p",components:n},"I hope you've found something useful in this article; most of this information has come from me having to deal with line endings issues, but the ASCII information I read in Charles Petzold's excellent book ",r.a.createElement(i.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://en.wikipedia.org/wiki/Code:_The_Hidden_Language_of_Computer_Hardware_and_Software"}},"CODE"),"."),r.a.createElement(i.MDXTag,{name:"p",components:n},"The general best practice to line endings would be:"),r.a.createElement(i.MDXTag,{name:"ol",components:n},r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ol"},"Set up a gitattributes file in all shared repositories"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ol"},"Set autocrlf globally to the git reccomendation"),r.a.createElement(i.MDXTag,{name:"li",components:n,parentName:"ol"},"If a repo uses CRLF exclusively, locally set your autocrlf value to false")),r.a.createElement(i.MDXTag,{name:"h3",components:n},"Extra!"),r.a.createElement(i.MDXTag,{name:"p",components:n},"Recently I've seen that ",r.a.createElement(i.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://prettier.io/"}},"Prettier")," includes an ",r.a.createElement(i.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://prettier.io/docs/en/options.html#end-of-line"}},"end-of-line")," config option. This might be a nice way to help reduce the amount of erroneous line endings that get included in shared projects, so is probably worth setting if using prettier on a project."),r.a.createElement(i.MDXTag,{name:"p",components:n},"This prettier option is also useful if you need to change the line-endings for a particular file; set it to what you need, and format the file!"),r.a.createElement(i.MDXTag,{name:"p",components:n},"Thanks for reading \ud83e\udd73"))}}}]);
//# sourceMappingURL=6.af4b18ec.chunk.js.map
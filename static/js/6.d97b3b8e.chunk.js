(this["webpackJsonpjonshort.me"]=this["webpackJsonpjonshort.me"]||[]).push([[6],{30:function(e,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.withMDXComponents=void 0;var t,o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},r=a(1),m=(t=r)&&t.__esModule?t:{default:t};var l=m.default.createContext({}),i=l.Provider,c=l.Consumer;n.withMDXComponents=function(e){return function(n){return m.default.createElement(c,null,(function(a){return m.default.createElement(e,o({},n,{components:n.components||a}))}))}};n.default=function(e){return m.default.createElement(i,{value:e.components},e.children)}},31:function(e,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t=a(32);Object.defineProperty(n,"MDXTag",{enumerable:!0,get:function(){return r(t).default}});var o=a(30);function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(n,"MDXProvider",{enumerable:!0,get:function(){return r(o).default}})},32:function(e,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t,o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},r=function(){function e(e,n){for(var a=0;a<n.length;a++){var t=n[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(n,a,t){return a&&e(n.prototype,a),t&&e(n,t),n}}(),m=a(1),l=(t=m)&&t.__esModule?t:{default:t},i=a(30);function c(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function s(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!==typeof n&&"function"!==typeof n?e:n}var p={inlineCode:"code",wrapper:"div"},g=function(e){function n(){return c(this,n),s(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),r(n,[{key:"render",value:function(){var e=this.props,n=e.name,a=e.parentName,t=e.props,r=void 0===t?{}:t,m=e.children,i=e.components,c=void 0===i?{}:i,s=e.Layout,g=e.layoutProps,u=c[a+"."+n]||c[n]||p[n]||n;return s?l.default.createElement(s,o({components:c},g),l.default.createElement(u,r,m)):l.default.createElement(u,r,m)}}]),n}(m.Component);n.default=(0,i.withMDXComponents)(g)},33:function(e,n,a){"use strict";function t(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}a.d(n,"a",(function(){return t}))},35:function(e,n,a){"use strict";a.r(n);var t=a(33),o=a(1),r=a.n(o),m=a(31),l=["components"];n.default=function(e){var n=e.components;Object(t.a)(e,l);return r.a.createElement(m.MDXTag,{name:"wrapper",components:n},r.a.createElement(m.MDXTag,{name:"p",components:n},r.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://en.wikipedia.org/wiki/Newline"}},"Line endings")," can be extremely annoying when sharing code between mac / linux / windows."),r.a.createElement(m.MDXTag,{name:"p",components:n},"Each operating system handles line endings differently, with the two main 'end of line' (EOL) types being:"),r.a.createElement(m.MDXTag,{name:"ul",components:n},r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"CRLF")," (windows)"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"LF")," (unix / mac)")),r.a.createElement(m.MDXTag,{name:"h3",components:n},"What are line endings?"),r.a.createElement(m.MDXTag,{name:"p",components:n},"A hangover of ASCII code being developed in the 1960s, ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"CRLF")," actually represents two instructions, 'carriage return' (CR) and 'line feed' (LF). "),r.a.createElement(m.MDXTag,{name:"p",components:n},"If we imagine a typewriter, ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"CR")," instructs the 'carriage' (the part which horizontally positions the paper) to return to its starting position, then ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"LF")," feeds paper into the carriage, creating a newline."),r.a.createElement(m.MDXTag,{name:"p",components:n},r.a.createElement(m.MDXTag,{name:"img",components:n,parentName:"p",props:{src:"typewriter_illustration",alt:"diagram showing how a typewriter works"}})),r.a.createElement(m.MDXTag,{name:"h3",components:n},"The codes behind line endings"),r.a.createElement(m.MDXTag,{name:"p",components:n},"Imagine we access a windows machine and create a text file with the following content:"),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-txt",metaString:""}},"a\n\nb\n\nc\n")),r.a.createElement(m.MDXTag,{name:"p",components:n},"If we were to look at the ASCII behind the file, it'd look something like:"),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ASCII",metaString:""}},"61 0D 0A 0D 0A 62 0D 0A 0D 0A 63\n")),r.a.createElement("small",null,"note - I chose hex because it's a bit more compact than the raw binary"),r.a.createElement(m.MDXTag,{name:"p",components:n},"However if we had created our text file on a mac, it might instead look like:"),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ASCII",metaString:""}},"61 0A 0A 62 0A 0A 63\n")),r.a.createElement(m.MDXTag,{name:"p",components:n},"Here's what each hex represents:"),r.a.createElement(m.MDXTag,{name:"ul",components:n},r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"61")," - a"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"62")," - b"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"63")," - c"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"0D")," - CR"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"0A")," - LF ")),r.a.createElement(m.MDXTag,{name:"p",components:n},"Notice that wherever there is a line break, windows includes ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"0D 0A")," (CR LF) whereas mac includes only ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"0A")," (LF)."),r.a.createElement(m.MDXTag,{name:"p",components:n},"Reading & writing text files with different line endings might have led to issues in the past, but nowadays most programs / operating systems handle it gracefully, so users don't have to worry about which EOL style was used."),r.a.createElement(m.MDXTag,{name:"p",components:n},"It's usually when we involve source control that the problems start to appear."),r.a.createElement(m.MDXTag,{name:"h3",components:n},"A real-life scenario"),r.a.createElement(m.MDXTag,{name:"p",components:n},"Let's run through a scenario (with a link to where this happened to me \ud83d\ude05):"),r.a.createElement(m.MDXTag,{name:"ol",components:n},r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ol"},"We fork a repository to fix a bug that has been reported"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ol"},"Our first commit goes in, where we edited a few lines in one file"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ol"},"We continue making changes, eventually we've made changes in 3 different files"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ol"},r.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://github.com/FormidableLabs/prism-react-renderer/pull/83/files/e6d4f1ec6039205cdae494ddbc1da3138e7a2a2b#diff-46e096273c34574c69c78c6fe33ac032"}},"We submit the PR, and notice the diff is unreadable!"))),r.a.createElement(m.MDXTag,{name:"p",components:n},"Git is showing us that every single line in the file has changed, but it isn't highlighting a specific area! It turns out that we've accidentally changed all the line endings in each file we edited."),r.a.createElement(m.MDXTag,{name:"p",components:n},"In our scenario:"),r.a.createElement(m.MDXTag,{name:"ul",components:n},r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"The repository didn't include a ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},".gitattributes")," file"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"The repository used ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"CRLF")," line endings (this was surprising)"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"I was working on macOS with ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"core.autocrlf"),' set to "input" globally')),r.a.createElement(m.MDXTag,{name:"h3",components:n},"gitattributes"),r.a.createElement(m.MDXTag,{name:"p",components:n},"The ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".gitattributes")," file handles a few different things, but the most common use is to tell git how to handle line endings for different filetypes."),r.a.createElement(m.MDXTag,{name:"p",components:n},"They range in complexity, from a simple:"),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yml",metaString:""}},"# Handle line endings automatically\n# for files detected as text\n# and leave all files detected\n# as binary untouched.\n* text=auto\n")),r.a.createElement(m.MDXTag,{name:"p",components:n},"To something more bespoke:"),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-yml",metaString:""}},"# Set the default behavior,\n# in case people don't have\n# core.autocrlf set.\n* text=auto\n\n# Explicitly declare text files you\n# want to always be converted\n# to native line endings on checkout.\n*.c text\n*.h text\n\n# Declare files that will always\n# have CRLF line endings on checkout.\n*.sln text eol=crlf\n\n# Denote all files that are truly\n# binary and should not be modified.\n*.png binary\n*.jpg binary\n")),r.a.createElement(m.MDXTag,{name:"p",components:n},"The flags above show:"),r.a.createElement(m.MDXTag,{name:"ul",components:n},r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"binary")," - don't process this file for line endings"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"text")," - process this file for line endings"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"eol")," - convert all line endings to this style ")),r.a.createElement(m.MDXTag,{name:"h3",components:n},"core.autocrlf"),r.a.createElement(m.MDXTag,{name:"p",components:n},"The ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"core.autocrlf")," setting controls how git handles line endings on checkout and on commit."),r.a.createElement(m.MDXTag,{name:"p",components:n},"There are three options that can be used:"),r.a.createElement(m.MDXTag,{name:"ul",components:n},r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"true"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"input"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"false")),r.a.createElement(m.MDXTag,{name:"p",components:n},"The ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"true")," option will convert the line endings to ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"CRLF")," when checked out, but ensure line endings are ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"LF")," on commit."),r.a.createElement(m.MDXTag,{name:"p",components:n},"The ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"input")," option won't change line endings on checkout, but will ensure that files are ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"LF")," on commit."),r.a.createElement(m.MDXTag,{name:"p",components:n},"The ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"false")," option will disable any conversion, allowing ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"CRLF")," line endings to be committed."),r.a.createElement(m.MDXTag,{name:"p",components:n},"It's worth noting that these 'generic' options are overridden by the ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".gitattributes")," file, which is why it's usually a good idea to include one of these files if you're working on a project with developers who use a mixture of operating systems."),r.a.createElement(m.MDXTag,{name:"h3",components:n},"What's the best configuration?"),r.a.createElement(m.MDXTag,{name:"p",components:n},"Generally git reccomends text files use ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"LF")," line endings when committed to source control. Because of this, the best 'default' option for ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"core.autocrlf")," varies depending on the OS:"),r.a.createElement(m.MDXTag,{name:"ul",components:n},r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"li"},"Windows")," reccomends ",r.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"li"},"true"),", which gives you ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"CRLF")," locally, but ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"LF")," in source control"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},r.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"li"},"Unix / MacOS")," reccomends ",r.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"li"},"input"),", which ensures that code is ",r.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"LF")," when checked in, but doesn't convert on checkout")),r.a.createElement(m.MDXTag,{name:"h3",components:n},"How can we set the config?"),r.a.createElement(m.MDXTag,{name:"p",components:n},"It's often useful to setup a global git configuration, so that we have some reasonable defaults when working in new repositories."),r.a.createElement(m.MDXTag,{name:"p",components:n},"Then when a repository needs bespoke settings, we can set a local config which will only be used for that particular repo."),r.a.createElement(m.MDXTag,{name:"p",components:n},"Here are some examples:"),r.a.createElement(m.MDXTag,{name:"p",components:n},r.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"p"},"Check the current global git config")),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-bash",metaString:""}},"git config --global --list\n")),r.a.createElement(m.MDXTag,{name:"p",components:n},r.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"p"},"Set the global autocrlf config to input")),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-bash",metaString:""}},"git config --global core.autocrlf input\n")),r.a.createElement(m.MDXTag,{name:"p",components:n},r.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"p"},"Check the autocrlf config which will be used for the current repo")),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-bash",metaString:""}},"git config --get core.autocrlf\n")),r.a.createElement(m.MDXTag,{name:"p",components:n},r.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"p"},"Set the local repo config to false")),r.a.createElement(m.MDXTag,{name:"pre",components:n},r.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-bash",metaString:""}},"git config --local core.autocrlf false\n")),r.a.createElement(m.MDXTag,{name:"h3",components:n},"Summary"),r.a.createElement(m.MDXTag,{name:"p",components:n},"I hope you've found something useful in this article; most of this information has come from me having to deal with line endings issues, but the ASCII information I read in Charles Petzold's excellent book ",r.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://en.wikipedia.org/wiki/Code:_The_Hidden_Language_of_Computer_Hardware_and_Software"}},"CODE"),"."),r.a.createElement(m.MDXTag,{name:"p",components:n},"The general best practice to line endings would be:"),r.a.createElement(m.MDXTag,{name:"ol",components:n},r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ol"},"Set up a gitattributes file in all shared repositories"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ol"},"Set autocrlf globally to the git reccomendation"),r.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ol"},"If a repo uses CRLF exclusively, locally set your autocrlf value to false")),r.a.createElement(m.MDXTag,{name:"h3",components:n},"Extra!"),r.a.createElement(m.MDXTag,{name:"p",components:n},"Recently I've seen that ",r.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://prettier.io/"}},"Prettier")," includes an ",r.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://prettier.io/docs/en/options.html#end-of-line"}},"end-of-line")," config option. This might be a nice way to help reduce the amount of erroneous line endings that get included in shared projects, so is probably worth setting if using prettier on a project."),r.a.createElement(m.MDXTag,{name:"p",components:n},"This prettier option is also useful if you need to change the line-endings for a particular file; set it to what you need, and format the file!"),r.a.createElement(m.MDXTag,{name:"p",components:n},"Thanks for reading \ud83e\udd73"))}}}]);
//# sourceMappingURL=6.d97b3b8e.chunk.js.map